# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.branded_food_item_label_nutrients_calcium import BrandedFoodItemLabelNutrientsCalcium
from openapi_client.models.branded_food_item_label_nutrients_calories import BrandedFoodItemLabelNutrientsCalories
from openapi_client.models.branded_food_item_label_nutrients_carbohydrates import BrandedFoodItemLabelNutrientsCarbohydrates
from openapi_client.models.branded_food_item_label_nutrients_fat import BrandedFoodItemLabelNutrientsFat
from openapi_client.models.branded_food_item_label_nutrients_fiber import BrandedFoodItemLabelNutrientsFiber
from openapi_client.models.branded_food_item_label_nutrients_iron import BrandedFoodItemLabelNutrientsIron
from openapi_client.models.branded_food_item_label_nutrients_potassium import BrandedFoodItemLabelNutrientsPotassium
from openapi_client.models.branded_food_item_label_nutrients_protein import BrandedFoodItemLabelNutrientsProtein
from openapi_client.models.branded_food_item_label_nutrients_saturated_fat import BrandedFoodItemLabelNutrientsSaturatedFat
from openapi_client.models.branded_food_item_label_nutrients_sugars import BrandedFoodItemLabelNutrientsSugars
from openapi_client.models.branded_food_item_label_nutrients_trans_fat import BrandedFoodItemLabelNutrientsTransFat

class BrandedFoodItemLabelNutrients(BaseModel):
    """
    BrandedFoodItemLabelNutrients
    """
    fat: Optional[BrandedFoodItemLabelNutrientsFat] = None
    saturated_fat: Optional[BrandedFoodItemLabelNutrientsSaturatedFat] = Field(None, alias="saturatedFat")
    trans_fat: Optional[BrandedFoodItemLabelNutrientsTransFat] = Field(None, alias="transFat")
    cholesterol: Optional[BrandedFoodItemLabelNutrientsTransFat] = None
    sodium: Optional[BrandedFoodItemLabelNutrientsTransFat] = None
    carbohydrates: Optional[BrandedFoodItemLabelNutrientsCarbohydrates] = None
    fiber: Optional[BrandedFoodItemLabelNutrientsFiber] = None
    sugars: Optional[BrandedFoodItemLabelNutrientsSugars] = None
    protein: Optional[BrandedFoodItemLabelNutrientsProtein] = None
    calcium: Optional[BrandedFoodItemLabelNutrientsCalcium] = None
    iron: Optional[BrandedFoodItemLabelNutrientsIron] = None
    potassium: Optional[BrandedFoodItemLabelNutrientsPotassium] = None
    calories: Optional[BrandedFoodItemLabelNutrientsCalories] = None
    __properties = ["fat", "saturatedFat", "transFat", "cholesterol", "sodium", "carbohydrates", "fiber", "sugars", "protein", "calcium", "iron", "potassium", "calories"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrandedFoodItemLabelNutrients:
        """Create an instance of BrandedFoodItemLabelNutrients from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of fat
        if self.fat:
            _dict['fat'] = self.fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saturated_fat
        if self.saturated_fat:
            _dict['saturatedFat'] = self.saturated_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trans_fat
        if self.trans_fat:
            _dict['transFat'] = self.trans_fat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cholesterol
        if self.cholesterol:
            _dict['cholesterol'] = self.cholesterol.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sodium
        if self.sodium:
            _dict['sodium'] = self.sodium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of carbohydrates
        if self.carbohydrates:
            _dict['carbohydrates'] = self.carbohydrates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fiber
        if self.fiber:
            _dict['fiber'] = self.fiber.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sugars
        if self.sugars:
            _dict['sugars'] = self.sugars.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protein
        if self.protein:
            _dict['protein'] = self.protein.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calcium
        if self.calcium:
            _dict['calcium'] = self.calcium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iron
        if self.iron:
            _dict['iron'] = self.iron.to_dict()
        # override the default output from pydantic by calling `to_dict()` of potassium
        if self.potassium:
            _dict['potassium'] = self.potassium.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calories
        if self.calories:
            _dict['calories'] = self.calories.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrandedFoodItemLabelNutrients:
        """Create an instance of BrandedFoodItemLabelNutrients from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrandedFoodItemLabelNutrients.parse_obj(obj)

        _obj = BrandedFoodItemLabelNutrients.parse_obj({
            "fat": BrandedFoodItemLabelNutrientsFat.from_dict(obj.get("fat")) if obj.get("fat") is not None else None,
            "saturated_fat": BrandedFoodItemLabelNutrientsSaturatedFat.from_dict(obj.get("saturatedFat")) if obj.get("saturatedFat") is not None else None,
            "trans_fat": BrandedFoodItemLabelNutrientsTransFat.from_dict(obj.get("transFat")) if obj.get("transFat") is not None else None,
            "cholesterol": BrandedFoodItemLabelNutrientsTransFat.from_dict(obj.get("cholesterol")) if obj.get("cholesterol") is not None else None,
            "sodium": BrandedFoodItemLabelNutrientsTransFat.from_dict(obj.get("sodium")) if obj.get("sodium") is not None else None,
            "carbohydrates": BrandedFoodItemLabelNutrientsCarbohydrates.from_dict(obj.get("carbohydrates")) if obj.get("carbohydrates") is not None else None,
            "fiber": BrandedFoodItemLabelNutrientsFiber.from_dict(obj.get("fiber")) if obj.get("fiber") is not None else None,
            "sugars": BrandedFoodItemLabelNutrientsSugars.from_dict(obj.get("sugars")) if obj.get("sugars") is not None else None,
            "protein": BrandedFoodItemLabelNutrientsProtein.from_dict(obj.get("protein")) if obj.get("protein") is not None else None,
            "calcium": BrandedFoodItemLabelNutrientsCalcium.from_dict(obj.get("calcium")) if obj.get("calcium") is not None else None,
            "iron": BrandedFoodItemLabelNutrientsIron.from_dict(obj.get("iron")) if obj.get("iron") is not None else None,
            "potassium": BrandedFoodItemLabelNutrientsPotassium.from_dict(obj.get("potassium")) if obj.get("potassium") is not None else None,
            "calories": BrandedFoodItemLabelNutrientsCalories.from_dict(obj.get("calories")) if obj.get("calories") is not None else None
        })
        return _obj


