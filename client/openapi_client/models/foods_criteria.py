# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class FoodsCriteria(BaseModel):
    """
    JSON for request body of 'foods' POST request. Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
    """
    fdc_ids: Optional[conlist(StrictInt, max_items=20, min_items=1)] = Field(None, alias="fdcIds", description="List of multiple FDC ID's")
    format: Optional[StrictStr] = Field(None, description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).")
    nutrients: Optional[conlist(StrictInt, max_items=25, min_items=1)] = Field(None, description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned.  If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.")
    __properties = ["fdcIds", "format", "nutrients"]

    @validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('abridged', 'full'):
            raise ValueError("must be one of enum values ('abridged', 'full')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FoodsCriteria:
        """Create an instance of FoodsCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FoodsCriteria:
        """Create an instance of FoodsCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FoodsCriteria.parse_obj(obj)

        _obj = FoodsCriteria.parse_obj({
            "fdc_ids": obj.get("fdcIds"),
            "format": obj.get("format"),
            "nutrients": obj.get("nutrients")
        })
        return _obj


