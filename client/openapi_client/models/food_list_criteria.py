# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist, validator

class FoodListCriteria(BaseModel):
    """
    JSON for request body of 'list' POST request  # noqa: E501
    """
    data_type: Optional[conlist(StrictStr, max_items=4, min_items=1)] = Field(None, alias="dataType", description="Optional. Filter on a specific data type; specify one or more values in an array.")
    page_size: Optional[conint(strict=True, le=200, ge=1)] = Field(None, alias="pageSize", description="Optional. Maximum number of results to return for the current page. Default is 50.")
    page_number: Optional[StrictInt] = Field(None, alias="pageNumber", description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)")
    sort_by: Optional[StrictStr] = Field(None, alias="sortBy", description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.")
    sort_order: Optional[StrictStr] = Field(None, alias="sortOrder", description="Optional. The sort direction for the results. Only applicable if sortBy is specified.")
    __properties = ["dataType", "pageSize", "pageNumber", "sortBy", "sortOrder"]

    @validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy'):
                raise ValueError("each list item must be one of ('Branded', 'Foundation', 'Survey (FNDDS)', 'SR Legacy')")
        return value

    @validator('sort_by')
    def sort_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate'):
            raise ValueError("must be one of enum values ('dataType.keyword', 'lowercaseDescription.keyword', 'fdcId', 'publishedDate')")
        return value

    @validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('asc', 'desc'):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FoodListCriteria:
        """Create an instance of FoodListCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FoodListCriteria:
        """Create an instance of FoodListCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FoodListCriteria.parse_obj(obj)

        _obj = FoodListCriteria.parse_obj({
            "data_type": obj.get("dataType"),
            "page_size": obj.get("pageSize"),
            "page_number": obj.get("pageNumber"),
            "sort_by": obj.get("sortBy"),
            "sort_order": obj.get("sortOrder")
        })
        return _obj


