# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from openapi_client.models.abridged_food_item import AbridgedFoodItem
from openapi_client.models.branded_food_item import BrandedFoodItem
from openapi_client.models.foundation_food_item import FoundationFoodItem
from openapi_client.models.sr_legacy_food_item import SRLegacyFoodItem
from openapi_client.models.survey_food_item import SurveyFoodItem
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

GETFOODS200RESPONSEINNER_ANY_OF_SCHEMAS = ["AbridgedFoodItem", "BrandedFoodItem", "FoundationFoodItem", "SRLegacyFoodItem", "SurveyFoodItem"]

class GetFoods200ResponseInner(BaseModel):
    """
    GetFoods200ResponseInner
    """

    # data type: AbridgedFoodItem
    anyof_schema_1_validator: Optional[AbridgedFoodItem] = None
    # data type: BrandedFoodItem
    anyof_schema_2_validator: Optional[BrandedFoodItem] = None
    # data type: FoundationFoodItem
    anyof_schema_3_validator: Optional[FoundationFoodItem] = None
    # data type: SRLegacyFoodItem
    anyof_schema_4_validator: Optional[SRLegacyFoodItem] = None
    # data type: SurveyFoodItem
    anyof_schema_5_validator: Optional[SurveyFoodItem] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AbridgedFoodItem, BrandedFoodItem, FoundationFoodItem, SRLegacyFoodItem, SurveyFoodItem]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[GETFOODS200RESPONSEINNER_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = GetFoods200ResponseInner.model_construct()
        error_messages = []
        # validate data type: AbridgedFoodItem
        if not isinstance(v, AbridgedFoodItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AbridgedFoodItem`")
        else:
            return v

        # validate data type: BrandedFoodItem
        if not isinstance(v, BrandedFoodItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrandedFoodItem`")
        else:
            return v

        # validate data type: FoundationFoodItem
        if not isinstance(v, FoundationFoodItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FoundationFoodItem`")
        else:
            return v

        # validate data type: SRLegacyFoodItem
        if not isinstance(v, SRLegacyFoodItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SRLegacyFoodItem`")
        else:
            return v

        # validate data type: SurveyFoodItem
        if not isinstance(v, SurveyFoodItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SurveyFoodItem`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in GetFoods200ResponseInner with anyOf schemas: AbridgedFoodItem, BrandedFoodItem, FoundationFoodItem, SRLegacyFoodItem, SurveyFoodItem. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[AbridgedFoodItem] = None
        try:
            instance.actual_instance = AbridgedFoodItem.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[BrandedFoodItem] = None
        try:
            instance.actual_instance = BrandedFoodItem.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[FoundationFoodItem] = None
        try:
            instance.actual_instance = FoundationFoodItem.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[SRLegacyFoodItem] = None
        try:
            instance.actual_instance = SRLegacyFoodItem.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[SurveyFoodItem] = None
        try:
            instance.actual_instance = SurveyFoodItem.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetFoods200ResponseInner with anyOf schemas: AbridgedFoodItem, BrandedFoodItem, FoundationFoodItem, SRLegacyFoodItem, SurveyFoodItem. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


