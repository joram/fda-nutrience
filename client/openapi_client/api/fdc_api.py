# coding: utf-8

"""
    Food Data Central API

    The FoodData Central API provides REST access to FoodData Central (FDC). It is intended primarily to assist application developers wishing to incorporate nutrient data into their applications or websites.   To take full advantage of the API, developers should familiarize themselves with the database by reading the database documentation available via links on [Data Type Documentation](https://fdc.nal.usda.gov/data-documentation.html). This documentation provides the detailed definitions and descriptions needed to understand the data elements referenced in the API documentation.      Additional details about the API including rate limits, access, and licensing are available on the [FDC website](https://fdc.nal.usda.gov/api-guide.html)

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conint, conlist, validator

from typing import List, Optional

from openapi_client.models.abridged_food_item import AbridgedFoodItem
from openapi_client.models.food_list_criteria import FoodListCriteria
from openapi_client.models.food_search_criteria import FoodSearchCriteria
from openapi_client.models.foods_criteria import FoodsCriteria
from openapi_client.models.get_foods200_response_inner import GetFoods200ResponseInner
from openapi_client.models.inline_response200 import InlineResponse200
from openapi_client.models.search_result import SearchResult

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FDCApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_food(self, fdc_id : Annotated[StrictStr, Field(..., description="FDC id of the food to retrieve")], format : Annotated[Optional[StrictStr], Field(description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).")] = None, nutrients : Annotated[Optional[conlist(StrictInt, max_items=25, min_items=1)], Field(description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.")] = None, **kwargs) -> InlineResponse200:  # noqa: E501
        """Fetches details for one food item by FDC ID  # noqa: E501

        Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_food(fdc_id, format, nutrients, async_req=True)
        >>> result = thread.get()

        :param fdc_id: FDC id of the food to retrieve (required)
        :type fdc_id: str
        :param format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :type format: str
        :param nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :type nutrients: List[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InlineResponse200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_food_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_food_with_http_info(fdc_id, format, nutrients, **kwargs)  # noqa: E501

    @validate_arguments
    def get_food_with_http_info(self, fdc_id : Annotated[StrictStr, Field(..., description="FDC id of the food to retrieve")], format : Annotated[Optional[StrictStr], Field(description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).")] = None, nutrients : Annotated[Optional[conlist(StrictInt, max_items=25, min_items=1)], Field(description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetches details for one food item by FDC ID  # noqa: E501

        Retrieves a single food item by an FDC ID. Optional format and nutrients can be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_food_with_http_info(fdc_id, format, nutrients, async_req=True)
        >>> result = thread.get()

        :param fdc_id: FDC id of the food to retrieve (required)
        :type fdc_id: str
        :param format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :type format: str
        :param nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :type nutrients: List[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'fdc_id',
            'format',
            'nutrients'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_food" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['fdc_id'] is not None:
            _path_params['fdcId'] = _params['fdc_id']


        # process the query parameters
        _query_params = []
        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        if _params.get('nutrients') is not None:  # noqa: E501
            _query_params.append(('nutrients', _params['nutrients']))
            _collection_formats['nutrients'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "InlineResponse200",
            '400': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/v1/food/{fdcId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_foods(self, fdc_ids : Annotated[conlist(StrictStr, max_items=20, min_items=1), Field(..., description="List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052).")], format : Annotated[Optional[StrictStr], Field(description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).")] = None, nutrients : Annotated[Optional[conlist(StrictInt, max_items=25, min_items=1)], Field(description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.")] = None, **kwargs) -> List[GetFoods200ResponseInner]:  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods(fdc_ids, format, nutrients, async_req=True)
        >>> result = thread.get()

        :param fdc_ids: List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052). (required)
        :type fdc_ids: List[str]
        :param format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :type format: str
        :param nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :type nutrients: List[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[GetFoods200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_foods_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_foods_with_http_info(fdc_ids, format, nutrients, **kwargs)  # noqa: E501

    @validate_arguments
    def get_foods_with_http_info(self, fdc_ids : Annotated[conlist(StrictStr, max_items=20, min_items=1), Field(..., description="List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052).")], format : Annotated[Optional[StrictStr], Field(description="Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).")] = None, nutrients : Annotated[Optional[conlist(StrictInt, max_items=25, min_items=1)], Field(description="Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods_with_http_info(fdc_ids, format, nutrients, async_req=True)
        >>> result = thread.get()

        :param fdc_ids: List of multiple FDC ID's. Should be comma separated list (e.g. fdcIds=534358,373052) or repeating parameters (e.g. fdcIds=534358&fdcIds=373052). (required)
        :type fdc_ids: List[str]
        :param format: Optional. 'abridged' for an abridged set of elements, 'full' for all elements (default).
        :type format: str
        :param nutrients: Optional. List of up to 25 nutrient numbers. Only the nutrient information for the specified nutrients will be returned. Should be comma separated list (e.g. nutrients=203,204) or repeating parameters (e.g. nutrients=203&nutrients=204). If a food does not have any matching nutrients, the food will be returned with an empty foodNutrients element.
        :type nutrients: List[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[GetFoods200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'fdc_ids',
            'format',
            'nutrients'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('fdc_ids') is not None:  # noqa: E501
            _query_params.append(('fdcIds', _params['fdc_ids']))
            _collection_formats['fdcIds'] = 'multi'

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        if _params.get('nutrients') is not None:  # noqa: E501
            _query_params.append(('nutrients', _params['nutrients']))
            _collection_formats['nutrients'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[GetFoods200ResponseInner]",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_foods_list(self, data_type : Annotated[Optional[conlist(StrictStr, max_items=4, min_items=1)], Field(description="Optional. Filter on a specific data type; specify one or more values in an array.")] = None, page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Optional. Maximum number of results to return for the current page. Default is 50.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional. The sort direction for the results. Only applicable if sortBy is specified.")] = None, **kwargs) -> List[AbridgedFoodItem]:  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods_list(data_type, page_size, page_number, sort_by, sort_order, async_req=True)
        >>> result = thread.get()

        :param data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :type data_type: List[str]
        :param page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :type page_size: int
        :param page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :type page_number: int
        :param sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :type sort_by: str
        :param sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :type sort_order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AbridgedFoodItem]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_foods_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_foods_list_with_http_info(data_type, page_size, page_number, sort_by, sort_order, **kwargs)  # noqa: E501

    @validate_arguments
    def get_foods_list_with_http_info(self, data_type : Annotated[Optional[conlist(StrictStr, max_items=4, min_items=1)], Field(description="Optional. Filter on a specific data type; specify one or more values in an array.")] = None, page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Optional. Maximum number of results to return for the current page. Default is 50.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional. The sort direction for the results. Only applicable if sortBy is specified.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods_list_with_http_info(data_type, page_size, page_number, sort_by, sort_order, async_req=True)
        >>> result = thread.get()

        :param data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :type data_type: List[str]
        :param page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :type page_size: int
        :param page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :type page_number: int
        :param sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :type sort_by: str
        :param sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :type sort_order: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AbridgedFoodItem], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'data_type',
            'page_size',
            'page_number',
            'sort_by',
            'sort_order'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('data_type') is not None:  # noqa: E501
            _query_params.append(('dataType', _params['data_type']))
            _collection_formats['dataType'] = 'csv'

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[AbridgedFoodItem]",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods/list', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_foods_search(self, query : Annotated[StrictStr, Field(..., description="One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)")], data_type : Annotated[Optional[conlist(StrictStr, max_items=4, min_items=1)], Field(description="Optional. Filter on a specific data type; specify one or more values in an array.")] = None, page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Optional. Maximum number of results to return for the current page. Default is 50.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional. The sort direction for the results. Only applicable if sortBy is specified.")] = None, brand_owner : Annotated[Optional[StrictStr], Field(description="Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods")] = None, **kwargs) -> SearchResult:  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods_search(query, data_type, page_size, page_number, sort_by, sort_order, brand_owner, async_req=True)
        >>> result = thread.get()

        :param query: One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :type query: str
        :param data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :type data_type: List[str]
        :param page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :type page_size: int
        :param page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :type page_number: int
        :param sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :type sort_by: str
        :param sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :type sort_order: str
        :param brand_owner: Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods
        :type brand_owner: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_foods_search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_foods_search_with_http_info(query, data_type, page_size, page_number, sort_by, sort_order, brand_owner, **kwargs)  # noqa: E501

    @validate_arguments
    def get_foods_search_with_http_info(self, query : Annotated[StrictStr, Field(..., description="One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)")], data_type : Annotated[Optional[conlist(StrictStr, max_items=4, min_items=1)], Field(description="Optional. Filter on a specific data type; specify one or more values in an array.")] = None, page_size : Annotated[Optional[conint(strict=True, le=200, ge=1)], Field(description="Optional. Maximum number of results to return for the current page. Default is 50.")] = None, page_number : Annotated[Optional[StrictInt], Field(description="Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)")] = None, sort_by : Annotated[Optional[StrictStr], Field(description="Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.")] = None, sort_order : Annotated[Optional[StrictStr], Field(description="Optional. The sort direction for the results. Only applicable if sortBy is specified.")] = None, brand_owner : Annotated[Optional[StrictStr], Field(description="Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_foods_search_with_http_info(query, data_type, page_size, page_number, sort_by, sort_order, brand_owner, async_req=True)
        >>> result = thread.get()

        :param query: One or more search terms.  The string may include [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :type query: str
        :param data_type: Optional. Filter on a specific data type; specify one or more values in an array.
        :type data_type: List[str]
        :param page_size: Optional. Maximum number of results to return for the current page. Default is 50.
        :type page_size: int
        :param page_number: Optional. Page number to retrieve. The offset into the overall result set is expressed as (pageNumber * pageSize)
        :type page_number: int
        :param sort_by: Optional. Specify one of the possible values to sort by that field. Note, dataType.keyword will be dataType and lowercaseDescription.keyword will be description in future releases.
        :type sort_by: str
        :param sort_order: Optional. The sort direction for the results. Only applicable if sortBy is specified.
        :type sort_order: str
        :param brand_owner: Optional. Filter results based on the brand owner of the food. Only applies to Branded Foods
        :type brand_owner: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'data_type',
            'page_size',
            'page_number',
            'sort_by',
            'sort_order',
            'brand_owner'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_foods_search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('data_type') is not None:  # noqa: E501
            _query_params.append(('dataType', _params['data_type']))
            _collection_formats['dataType'] = 'csv'

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('page_number') is not None:  # noqa: E501
            _query_params.append(('pageNumber', _params['page_number']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('sort_order') is not None:  # noqa: E501
            _query_params.append(('sortOrder', _params['sort_order']))

        if _params.get('brand_owner') is not None:  # noqa: E501
            _query_params.append(('brandOwner', _params['brand_owner']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "SearchResult",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_json_spec(self, **kwargs) -> None:  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_spec(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_json_spec_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_json_spec_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_json_spec_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as JSON (JavaScript Object Notation)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_spec_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json_spec" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/json-spec', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_yaml_spec(self, **kwargs) -> None:  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_yaml_spec(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_yaml_spec_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_yaml_spec_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_yaml_spec_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns this documentation in JSON format  # noqa: E501

        The OpenAPI 3.0 specification for the FDC API rendered as YAML (YAML Ain't Markup Language)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_yaml_spec_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_yaml_spec" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/yaml-spec', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_foods(self, foods_criteria : FoodsCriteria, **kwargs) -> List[GetFoods200ResponseInner]:  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods(foods_criteria, async_req=True)
        >>> result = thread.get()

        :param foods_criteria: (required)
        :type foods_criteria: FoodsCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[GetFoods200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_foods_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_foods_with_http_info(foods_criteria, **kwargs)  # noqa: E501

    @validate_arguments
    def post_foods_with_http_info(self, foods_criteria : FoodsCriteria, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetches details for multiple food items using input FDC IDs  # noqa: E501

        Retrieves a list of food items by a list of up to 20 FDC IDs. Optional format and nutrients can be specified. Invalid FDC ID's or ones that are not found are omitted and an empty set is returned if there are no matches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods_with_http_info(foods_criteria, async_req=True)
        >>> result = thread.get()

        :param foods_criteria: (required)
        :type foods_criteria: FoodsCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[GetFoods200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'foods_criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['foods_criteria'] is not None:
            _body_params = _params['foods_criteria']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[GetFoods200ResponseInner]",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_foods_list(self, food_list_criteria : FoodListCriteria, **kwargs) -> List[AbridgedFoodItem]:  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods_list(food_list_criteria, async_req=True)
        >>> result = thread.get()

        :param food_list_criteria: (required)
        :type food_list_criteria: FoodListCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AbridgedFoodItem]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_foods_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_foods_list_with_http_info(food_list_criteria, **kwargs)  # noqa: E501

    @validate_arguments
    def post_foods_list_with_http_info(self, food_list_criteria : FoodListCriteria, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a paged list of foods, in the 'abridged' format  # noqa: E501

        Retrieves a paged list of foods. Use the pageNumber parameter to page through the entire result set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods_list_with_http_info(food_list_criteria, async_req=True)
        >>> result = thread.get()

        :param food_list_criteria: (required)
        :type food_list_criteria: FoodListCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AbridgedFoodItem], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'food_list_criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['food_list_criteria'] is not None:
            _body_params = _params['food_list_criteria']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[AbridgedFoodItem]",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods/list', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_foods_search(self, food_search_criteria : Annotated[FoodSearchCriteria, Field(..., description="The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)")], **kwargs) -> SearchResult:  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods_search(food_search_criteria, async_req=True)
        >>> result = thread.get()

        :param food_search_criteria: The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :type food_search_criteria: FoodSearchCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_foods_search_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_foods_search_with_http_info(food_search_criteria, **kwargs)  # noqa: E501

    @validate_arguments
    def post_foods_search_with_http_info(self, food_search_criteria : Annotated[FoodSearchCriteria, Field(..., description="The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2)")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a list of foods that matched search (query) keywords  # noqa: E501

        Search for foods using keywords. Results can be filtered by dataType and there are options for result page sizes or sorting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_foods_search_with_http_info(food_search_criteria, async_req=True)
        >>> result = thread.get()

        :param food_search_criteria: The query string may also include standard [search operators](https://fdc.nal.usda.gov/help.html#bkmk-2) (required)
        :type food_search_criteria: FoodSearchCriteria
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'food_search_criteria'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_foods_search" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['food_search_criteria'] is not None:
            _body_params = _params['food_search_criteria']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ApiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "SearchResult",
            '400': None,
        }

        return self.api_client.call_api(
            '/v1/foods/search', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
